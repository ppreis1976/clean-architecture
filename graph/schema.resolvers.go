package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"clean-architecture/graph/model"
	modelOrder "clean-architecture/internal/model"
	"context"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	o := modelOrder.OrderDTO{
		Cliente:       input.Cliente,
		Vendedor:      input.Vendedor,
		Produto:       input.Produto,
		Quantidade:    *input.Quantidade,
		PrecoUnitario: *input.PrecoUnitario,
		StatusPedido:  modelOrder.StatusPedido(*input.StatusPedido),
		DataEntrega:   *input.DataEntrega,
	}

	order, err := r.OrderRepository.CreateOrder(o)
	if err != nil {
		return nil, err
	}

	status := order.StatusPedido.String()
	return &model.Order{
		PedidoID:      order.PedidoID,
		Cliente:       &order.Cliente,
		Vendedor:      &order.Vendedor,
		Produto:       &order.Produto,
		Quantidade:    &order.Quantidade,
		PrecoUnitario: &order.PrecoUnitario,
		PrecoTotal:    &order.PrecoTotal,
		StatusPedido:  &status,
		DataEntrega:   &order.DataEntrega,
	}, nil
}

// FindAll is the resolver for the FindAll field.
func (r *queryResolver) FindAll(ctx context.Context) ([]*model.Order, error) {
	orders := []*model.Order{}

	ordersDB, err := r.OrderRepository.FindAll()
	if err != nil {
		return nil, err
	}

	for _, order := range ordersDB {
		status := order.StatusPedido.String()
		orders = append(orders, &model.Order{
			PedidoID:      order.PedidoID,
			Cliente:       &order.Cliente,
			Vendedor:      &order.Vendedor,
			Produto:       &order.Produto,
			Quantidade:    &order.Quantidade,
			PrecoUnitario: &order.PrecoUnitario,
			PrecoTotal:    &order.PrecoTotal,
			StatusPedido:  &status,
			DataEntrega:   &order.DataEntrega,
		})
	}

	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
